/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.baaahs

import com.github.sarxos.webcam.Webcam
import com.github.sarxos.webcam.WebcamEvent
import com.github.sarxos.webcam.WebcamListener
import java.awt.Canvas
import java.awt.Dimension
import java.awt.Graphics
import java.awt.event.*
import java.awt.image.BufferedImage
import javax.swing.JFrame


class App : WebcamListener {
  private val webcam: Webcam by lazy { Webcam.getDefault()!! }
  private val frame = JFrame("BAAAHS Lights Mapper!")
  private lateinit var canvas: Canvas
  private var canvasImage: BufferedImage? = null

  private val camWatcher = CamWatcher(object: CamWatcher.Listener {
    override fun onDiff(image: BufferedImage) {
      if (frame.width != image.width || frame.height != image.height) {
        frame.size = Dimension(image.width, image.height)
      }
      canvasImage = image
      canvas.repaint()
    }
  })

  private var running = true

  fun go() {
    canvas = object: Canvas() {
      override fun paint(g: Graphics?) {
        super.paint(g)
        if (canvasImage != null) {
          g!!.drawImage(canvasImage, 0, 0, this)
        }
      }
    }

    canvas.addMouseListener(object: MouseAdapter() {
      override fun mouseClicked(e: MouseEvent?) {
        camWatcher.baseImage = webcam.image
      }
    })

    webcam.viewSize = findLargestSize()
    webcam.addWebcamListener(this)
    webcam.open(true)

    frame.add(canvas)
    frame.addWindowListener(object : WindowAdapter() {
      override fun windowClosing(e: WindowEvent) {
        running = false
        frame.dispose()
        camWatcher.stop()
      }

    })

    frame.isVisible = true

    camWatcher.start()
    println("webcam: ${webcam.name}")
  }

  override fun webcamOpen(we: WebcamEvent?) {
    println("webcamOpen = ${we}")
  }

  override fun webcamImageObtained(we: WebcamEvent?) {
    camWatcher.onImage(we!!.image)
  }

  override fun webcamClosed(we: WebcamEvent?) {
    println("webcamClosed = ${we}")

    running = false
    frame.dispose()
    running = false
    camWatcher.stop()
  }

  override fun webcamDisposed(we: WebcamEvent?) {
    println("webcamDisposed = ${we}")
  }

  private fun findLargestSize(): Dimension? {
    var largest: Dimension? = null
    for (viewSize in webcam.viewSizes) {
      if (largest == null) {
        largest = viewSize
      } else if (viewSize.width * viewSize.height > largest.width * largest.height) {
        largest = viewSize
      }
      println("${webcam.name} supports ${viewSize}")
    }
    return largest
  }

  val greeting: String
    get() {
      return "Hello world."
    }
}

fun main(args: Array<String>) {
  App().go()
  println (App().greeting)
}
